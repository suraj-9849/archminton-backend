// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  name               String
  phone              String?
  gender             String?
  role               Role               @default(USER)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  societyMemberships SocietyMember[]
  bookings           Booking[]
  courseEnrollments  CourseEnrollment[]
  venues             Venue[]            @relation("VenueUserAccess")

  VenueUserAccess VenueUserAccess[]

  UserMembership UserMembership[]
}

enum Role {
  USER
  VENUE_MANAGER
  ADMIN
  SUPERADMIN
}

model Society {
  id            Int             @id @default(autoincrement())
  name          String
  location      String
  description   String?
  contactPerson String?
  contactPhone  String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  members       SocietyMember[]
  venues        Venue[]
}

model SocietyMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  societyId Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  society   Society  @relation(fields: [societyId], references: [id])

  @@unique([userId, societyId])
}

model Venue {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String?
  location        String
  latitude        Float?
  longitude       Float?
  contactPhone    String?
  contactEmail    String?
  isActive        Boolean             @default(true)
  venueType       VenueType           @default(PUBLIC)
  societyId       Int?
  services        ServiceType[]       @default([])
  amenities       AmenityType[]       @default([])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  society         Society?            @relation(fields: [societyId], references: [id])
  courts          Court[]
  images          VenueImage[]
  venueUserAccess VenueUserAccess[]
  sportsConfig    VenueSportsConfig[]

  User User[] @relation("VenueUserAccess")
}

enum ServiceType {
  BOOK_N_PLAY
  COACHING
  EVENTS
  MEMBERSHIP
}

enum AmenityType {
  PARKING
  LOCKER_ROOMS
  CHANGING_ROOMS
  SHOWER_FACILITIES
  CAFETERIA
  RESTAURANT
  PRO_SHOP
  EQUIPMENT_RENTAL
  WIFI
  AIR_CONDITIONING
  LIGHTING
  SOUND_SYSTEM
  FIRST_AID
  SECURITY
  WHEELCHAIR_ACCESS
  SPECTATOR_SEATING
  WASHROOMS
  WATER_FOUNTAINS
  VENDING_MACHINES
  TOWEL_SERVICE
}

enum MembershipType {
  MONTHLY
  QUARTERLY
  YEARLY
  LIFETIME
}

enum MembershipStatus {
  PENDING
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

model MembershipPackage {
  id                  Int              @id @default(autoincrement())
  name                String
  description         String?
  type                MembershipType
  price               Decimal          @db.Decimal(10, 2)
  durationMonths      Int
  credits             Int?             @default(0)
  features            Json?
  maxBookingsPerMonth Int?
  allowedSports       SportType[]
  venueAccess         Int[]
  isActive            Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  memberships         UserMembership[]

  @@index([type])
  @@index([isActive])
}

model UserMembership {
  id                Int                     @id @default(autoincrement())
  userId            Int
  packageId         Int
  startDate         DateTime
  endDate           DateTime
  status            MembershipStatus        @default(ACTIVE)
  creditsRemaining  Int?                    @default(0)
  bookingsThisMonth Int                     @default(0)
  autoRenew         Boolean                 @default(false)
  paymentStatus     PaymentStatus           @default(PENDING)
  purchasePrice     Decimal                 @db.Decimal(10, 2)
  lastBillingDate   DateTime?
  nextBillingDate   DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  user              User                    @relation(fields: [userId], references: [id])
  package           MembershipPackage       @relation(fields: [packageId], references: [id])
  transactions      MembershipTransaction[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([endDate])
}

model MembershipTransaction {
  id               Int            @id @default(autoincrement())
  membershipId     Int
  type             String
  amount           Decimal?       @db.Decimal(10, 2)
  credits          Int?           @default(0)
  description      String?
  transactionDate  DateTime       @default(now())
  paymentMethod    PaymentMethod?
  paymentReference String?
  transactionId    String?
  membership       UserMembership @relation(fields: [membershipId], references: [id])

  @@index([membershipId])
  @@index([type])
}

enum VenueType {
  PUBLIC
  PRIVATE
}

model VenueSportsConfig {
  id        Int       @id @default(autoincrement())
  venueId   Int
  sportType SportType
  maxCourts Int       @default(1)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  venue     Venue     @relation(fields: [venueId], references: [id])

  @@unique([venueId, sportType])
}

model VenueUserAccess {
  id          Int      @id @default(autoincrement())
  venueId     Int
  userId      Int
  permissions String[] @default([])
  createdAt   DateTime @default(now())
  venue       Venue    @relation(fields: [venueId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([venueId, userId])
}

model VenueImage {
  id        Int      @id @default(autoincrement())
  venueId   Int
  imageUrl  String
  caption   String?
  isDefault Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  venue     Venue    @relation(fields: [venueId], references: [id])

  @@index([venueId, order])
}

model Court {
  id           Int        @id @default(autoincrement())
  name         String
  sportType    SportType
  description  String?
  venueId      Int
  pricePerHour Decimal    @db.Decimal(10, 2)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  venue        Venue      @relation(fields: [venueId], references: [id])
  bookings     Booking[]
  timeSlots    TimeSlot[]
}

enum SportType {
  BADMINTON
  TENNIS
  FOOTBALL
  CRICKET
  SWIMMING
  BASKETBALL
  VOLLEYBALL
  ARCHERY
  TABLE_TENNIS
  SQUASH
  OTHER
}

model TimeSlot {
  id        Int       @id @default(autoincrement())
  courtId   Int
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean   @default(true)
  court     Court     @relation(fields: [courtId], references: [id])
  bookings  Booking[]

  @@unique([courtId, dayOfWeek, startTime, endTime])
}

model Booking {
  id            Int            @id @default(autoincrement())
  userId        Int
  courtId       Int
  timeSlotId    Int
  bookingDate   DateTime
  startTime     String
  endTime       String
  status        BookingStatus  @default(CONFIRMED)
  totalAmount   Decimal        @db.Decimal(10, 2)
  paymentStatus PaymentStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  court         Court          @relation(fields: [courtId], references: [id])
  timeSlot      TimeSlot       @relation(fields: [timeSlotId], references: [id])
  addOns        BookingAddOn[]
  payment       Payment?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model BookingAddOn {
  id        Int     @id @default(autoincrement())
  bookingId Int
  addOnType String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int           @unique
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @default(ONLINE)
  transactionId String?
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id])
}

enum PaymentMethod {
  ONLINE
  CASH
  BANK_TRANSFER
}

model Course {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  sportType   SportType
  venueId     Int
  price       Decimal            @db.Decimal(10, 2)
  duration    Int // in days
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  enrollments CourseEnrollment[]
}

model CourseEnrollment {
  id            Int           @id @default(autoincrement())
  userId        Int
  courseId      Int
  startDate     DateTime
  endDate       DateTime
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  course        Course        @relation(fields: [courseId], references: [id])
}
